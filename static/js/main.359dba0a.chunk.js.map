{"version":3,"sources":["components/WeatherReport.js","components/SearchBar.js","App.js","index.js"],"names":["WeatherReport","WeatherInfo","temp","humidity","pressure","name","country","sunset","weathermood","speed","useState","WeatherCondition","setWeatherCondition","useEffect","dateObj","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","ampm","sunsetTime","className","toLocaleString","hour12","SearchBar","searchInput","setSearchInput","weatherInfo","setWeatherInfo","getWeatherInfo","a","url","fetch","response","json","data","main","sys","weather","wind","console","log","alert","htmlFor","type","placeholder","autoFocus","value","onChange","e","target","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.359dba0a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst WeatherReport = ({ WeatherInfo }) => {\n  const {\n    temp,\n    humidity,\n    pressure,\n    name,\n    country,\n    sunset,\n    weathermood,\n    speed\n  } = WeatherInfo;\n  const [WeatherCondition, setWeatherCondition] = useState(\"\");\n  useEffect(() => {\n    switch (weathermood) {\n      case \"Clouds\":\n        setWeatherCondition(\"wi wi-day-cloudy\");\n        break;\n      case \"Clear\":\n        setWeatherCondition(\"wi wi-day-sunny\");\n        break;\n      case \"Haze\":\n        setWeatherCondition(\"wi wi-day-sleet-storm\");\n        break;\n      case \"Mist\":\n        setWeatherCondition(\"wi wi-day-fog\");\n        break;\n      default:\n        setWeatherCondition(\"wi wi-day-sunny\");\n        break;\n    }\n  }, [weathermood]);\n\n  //Humidity Time\n  let miliseconds = sunset * 1000;\n  let dateObj = new Date(miliseconds);\n  let hours = dateObj.getHours();\n  let minutes = dateObj.getMinutes();\n  let seconds = dateObj.getSeconds();\n  let ampm = hours >= 12 ? \"PM\" : \"AM\";\n  hours = hours % 12 ? hours % 12 : 12;\n  hours = hours < 10 ? `0${hours}` : hours;\n  minutes = minutes < 10 ? `0${minutes}` : minutes;\n  const sunsetTime = `${hours} : ${minutes} : ${seconds} ${ampm}`;\n\n  return (\n    <article className=\"widget\">\n      <div className=\"weatherIcons\">\n        <i className={WeatherCondition}></i>\n      </div>\n\n      <div className=\"WeatherInfo\">\n        <div className=\"Wi-Temp\">\n          <div className=\"temperature\">\n            <span>{temp}&deg;</span>\n          </div>\n          <div className=\"description\">\n            <p className=\"weathercondition\">{weathermood}</p>\n            <p className=\"place\">{`${name}, ${country}`}</p>\n          </div>\n        </div>\n        <div className=\"wi-date\">\n          <p>\n            <i>Indian Standard Time</i>\n          </p>\n          <p>{new Date().toLocaleString(\"en-IN\", { hour12: true })}</p>\n        </div>\n      </div>\n\n      <div className=\"extra-weather-info\">\n        <div className=\"temp-info part\">\n          <p>\n            <i className={\"wi wi-sunset\"}></i>\n          </p>\n          <p>\n            {sunsetTime} <br /> Sunset Time\n          </p>\n        </div>\n\n        <div className=\"humidity-info part\">\n          <p>\n            <i className={\"wi wi-humidity\"}></i>\n          </p>\n          <p>\n            {humidity} <br /> Humidity\n          </p>\n        </div>\n\n        <div className=\"pressure-info part\">\n          <p>\n            <i className={\"wi wi-rain\"}></i>\n          </p>\n          <p>\n            Pressure <br /> {pressure} MM\n          </p>\n        </div>\n\n        <div className=\"wind-info part\">\n          <p>\n            <i className={\"wi wi-strong-wind\"}></i>\n          </p>\n          <p>\n            Wind <br /> {speed}\n          </p>\n        </div>\n      </div>\n    </article>\n  );\n};\n\nexport default WeatherReport;\n","import React, { useState, useEffect } from \"react\";\nimport WeatherReport from \"./WeatherReport\";\n\nconst SearchBar = () => {\n  const [searchInput, setSearchInput] = useState(\"greater noida\");\n  const [weatherInfo, setWeatherInfo] = useState({});\n  const getWeatherInfo = async () => {\n    if (searchInput) {\n      try {\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${searchInput}&units=metric&appid=d79f57d111a5be85d6cf0eb6e624afed`;\n\n        const response = await fetch(url);\n        const data = await response.json();\n        const { temp, humidity, pressure } = data.main;\n        const { name } = data;\n        const { country, sunset } = data.sys;\n        const { main: weathermood } = data.weather[0];\n        const { speed } = data.wind;\n        console.log(data);\n        setWeatherInfo({\n          temp,\n          humidity,\n          pressure,\n          name,\n          country,\n          sunset,\n          weathermood,\n          speed\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      alert(\"Please enter city name\");\n    }\n  };\n  useEffect(() => {\n    getWeatherInfo();\n  }, []);\n  return (\n    <>\n      <div className=\"search-header\">\n        <div className=\"search-label\">\n          <label htmlFor=\"CitySearch\">Please Enter City name</label>\n        </div>\n        <div className=\"wrap\">\n          <div className=\"search\">\n            <input\n              type=\"search\"\n              placeholder=\"Enter City Name\"\n              autoFocus\n              className=\"searchTerm\"\n              name=\"CitySearch\"\n              value={searchInput}\n              onChange={(e) => setSearchInput(e.target.value)}\n            />\n            <button\n              type=\"button\"\n              className=\"searchBtn\"\n              onClick={getWeatherInfo}\n            >\n              Search\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/*Weather Report Component*/}\n      <WeatherReport WeatherInfo={weatherInfo} />\n    </>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport SearchBar from \"./components/SearchBar\";\nimport \"./components/style.css\";\n\nconst App = () => {\n  return (\n    <>\n      <SearchBar />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}